import math
import random

# Define the coordinates of delivery locations
delivery_locations = {
    "Muvhango": (26.6741 S, 27.8022 E),
    "Orange Farm": (26.4665 S, 27.8590 E),
    "Sharpeville": (26.6864 S,27.8751 E),
    "Bophelong": (26.6934 S,27.7784 E),
    
}

# Start location (drone base)
Sebokeng Hospital = (0, 0)26.6071 S, 27.8473 E)

# Function to calculate distance between two points
def calculate_distance(point1, point2):
    return math.sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2)

# Drone class with basic functionalities
class Drone:
    def __init__(self, start_location):
        self.current_location = start_location
        self.delivery_log = []
        self.total_distance_traveled = 0.0

    def deliver_package(self, location_name, location_coords):
        # Calculate distance from current location to destination
        distance = calculate_distance(self.current_location, location_coords)
        
        # Simulate package delivery
        print(f"Delivering package to {location_name} at location {location_coords}. Distance: {distance:.2f}")
        
        # Log delivery details
        self.delivery_log.append((location_name, location_coords, distance))
        
        # Update current location and total distance
        self.current_location = location_coords
        self.total_distance_traveled += distance
    
    def return_to_base(self, base_location):
        distance_to_base = calculate_distance(self.current_location, base_location)
        print(f"Returning to base at location {base_location}. Distance: {distance_to_base:.2f}")
        self.total_distance_traveled += distance_to_base
        self.current_location = base_location

# Greedy approach to deliver to the nearest village first
def optimize_delivery_route(drone, delivery_locations):
    remaining_locations = delivery_locations.copy()
    
    while remaining_locations:
        # Find the closest delivery point
        closest_location = min(
            remaining_locations, 
            key=lambda loc: calculate_distance(drone.current_location, remaining_locations[loc])
        )
        
        # Deliver the package to the closest location
        drone.deliver_package(closest_location, remaining_locations[closest_location])
        
        # Remove the delivered location from the list
        del remaining_locations[closest_location]

# Main function to simulate the delivery process
def main():
    # Initialize the drone at the base location
    drone = Drone(start_location=base_location)
    
    # Optimize delivery route and deliver packages
    optimize_delivery_route(drone, delivery_locations)
    
    # After delivering all packages, return to the base
    drone.return_to_base(base_location)
    
    # Summary of the delivery
    print("\nDelivery Summary:")
    for log in drone.delivery_log:
        print(f"Delivered to {log[0]} at {log[1]} - Distance traveled: {log[2]:.2f}")
    print(f"Total distance traveled by the drone: {drone.total_distance_traveled:.2f}")

# Run the simulation
if __name__ == "__main__":
    main()

