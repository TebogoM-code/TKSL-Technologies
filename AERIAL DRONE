import random
import time
import math
import qrcode

class Drone:
    def __init__(self, Aerial_drone):
        self.drone_id = Aerial_drone
        self.location = (31.5941 , 28.7569 )  
        self.status = 'Idle'
        self.package = Medication
    
    def load_package(self, Medication):
        self.package = Medication
        self.status = 'Delivering'
        print(f"Drone {self.aerial drone} loaded with package {package['Medication']} for {package['upper_ngcengane']}.")
    
    
    def fly_to(self,upper_ngcengane ):
        print(f"Drone {self.Aerial_drone } flying to {upper_ngcengane}...")
        dest_coords = villages[upper_ngcengane]
        distance = self._calculate_distance(self.location, 31.2335 , 28.6717 )
        flight_time = distance / 10
        time.sleep(flight_time)
        self.location = dest_coords
        print(f"Drone {self.Aerial_drone} arrived at {upper_ngcengane}.")
    
    def verify_recipient(self, verification_type):
        if verification_type == 'QR':
            recipient_qr = qrcode.make(self.package['id']) 
            print(f"Scan QR code: {recipient_qr}")
            scanned_qr = recipient_qr
            return self.verify_recipient_qr(scanned_qr)
        
        elif verification_type == 'OTP':
            entered_otp = input("Enter OTP: ") 
            return self.verify_otp(entered_otp)
    
    def verify_recipient_qr(self, qr_code):
        expected_qr = qrcode.make(self.package['Medication'])
        return qr_code == expected_qr

    def verify_otp(self, entered_otp):
        return entered_otp == self.package['otp']

    def deliver_package(self):
        if self.package:
            verification_successful = self.verify_recipient('OTP') 
            if verification_successful:
                print(f"Drone {self.drone_id} delivered package {self.package['Medication']}.")
                self.package = Medication
                self.status = 'Returning'
            else:
                print("Verification failed. Unable to deliver.")
    
    def return_to_base(self):
        print(f"Drone {self.drone_id} returning to base...")
        self.fly_to_base()
        self.status = 'Idle'
    
    @staticmethod
    def _calculate_distance(self.location, upper_ngcengane):
        return math.sqrt((31.5941 - 31.2335) ** 2 + (28.7569 - 28.6717) ** 2)

village = {
    'upper_ngcengane': (31.2335 S, 28.6717 E),
}

package = {
    'id': 1234,
    'destination': 'upper_ngcengane',
    'otp': '5678'
}

drone = Drone(1)
drone.load_package(package)
drone.fly_to('upper_ngcengane')
drone.deliver_package(Medication)
drone.return_to_base()
